---
- name: Enforce password policy on Ubuntu/Debian
  hosts: all
  become: true
  gather_facts: true

  vars:
    # 可依稽核需求調整
    policy:
      pwquality:
        minlen: 12
        minclass: 3
        maxrepeat: 3
        usercheck: 1
        retry: 3
      pass_max_days: 90
      pass_min_days: 1
      pass_warn_age: 7
      remember: 5
      faillock:
        deny: 5
        unlock_time: 600
        fail_interval: 900

    # 要套用密碼期限的既有帳號（自行調整）
    users_to_update:
      - dgcadmin

  pre_tasks:
    - name: Ensure OS is Debian/Ubuntu
      ansible.builtin.assert:
        that: ansible_facts['os_family'] == "Debian"
        fail_msg: "This playbook 僅適用於 Ubuntu/Debian 系列。"

  tasks:
    - name: Install required packages
      ansible.builtin.apt:
        name:
          - libpam-pwquality
          - libpam-modules
        state: present
        update_cache: false 

    # ---- 密碼複雜度 pwquality.conf ----
    - name: Configure /etc/security/pwquality.conf
      ansible.builtin.blockinfile:
        path: /etc/security/pwquality.conf
        marker: "# {mark} ANSIBLE managed pwquality"
        create: true
        block: |
          minlen = {{ policy.pwquality.minlen }}
          minclass = {{ policy.pwquality.minclass }}
          maxrepeat = {{ policy.pwquality.maxrepeat }}
          usercheck = {{ policy.pwquality.usercheck }}

    - name: Ensure pam_pwquality is referenced in /etc/pam.d/common-password
      ansible.builtin.lineinfile:
        path: /etc/pam.d/common-password
        regexp: '^password\s+requisite\s+pam_pwquality\.so'
        line: "password requisite pam_pwquality.so retry={{ policy.pwquality.retry }}"
        insertbefore: '^password\s+\[success=1 default=ignore\]\s+pam_unix\.so'
        backup: true

    # ---- 禁止重複使用舊密碼 remember ----
    - name: Ensure pam_unix has remember option
      ansible.builtin.replace:
        path: /etc/pam.d/common-password
        regexp: '^(password\s+\[.*\]\s+pam_unix\.so.*?)(\s+remember=\d+)?\s*$'
        replace: '\1 remember={{ policy.remember }}'
        backup: true

    # ---- 密碼期限 login.defs（預設值）----
    - name: Set PASS_MAX_DAYS
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        regexp: '^\s*PASS_MAX_DAYS'
        line: "PASS_MAX_DAYS   {{ policy.pass_max_days }}"
        backup: true

    - name: Set PASS_MIN_DAYS
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        regexp: '^\s*PASS_MIN_DAYS'
        line: "PASS_MIN_DAYS   {{ policy.pass_min_days }}"
        backup: true

    - name: Set PASS_WARN_AGE
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        regexp: '^\s*PASS_WARN_AGE'
        line: "PASS_WARN_AGE   {{ policy.pass_warn_age }}"
        backup: true

    # ---- 登入失敗鎖定 pam_faillock ----
    - name: Configure /etc/security/faillock.conf
      ansible.builtin.blockinfile:
        path: /etc/security/faillock.conf
        marker: "# {mark} ANSIBLE managed faillock"
        create: true
        block: |
          deny = {{ policy.faillock.deny }}
          unlock_time = {{ policy.faillock.unlock_time }}
          fail_interval = {{ policy.faillock.fail_interval }}

    - name: Ensure pam_faillock in /etc/pam.d/common-auth
      ansible.builtin.blockinfile:
        path: /etc/pam.d/common-auth
        marker: "# {mark} ANSIBLE pam_faillock (preauth/authfail)"
        insertafter: BOF
        block: |
          auth required pam_faillock.so preauth
          auth required pam_faillock.so authfail

    - name: Ensure pam_faillock in /etc/pam.d/common-account
      ansible.builtin.blockinfile:
        path: /etc/pam.d/common-account
        marker: "# {mark} ANSIBLE pam_faillock (account)"
        insertafter: BOF
        block: |
          account required pam_faillock.so

    # ---- 對既有帳號套用密碼期限 ----
    - name: Enforce password aging on existing users
      community.general.chage:
        user: "{{ item }}"
        max_days: 90       # 等同 chage -M
        min_days: 7        # 等同 chage -m
        warn_days: 14      # 等同 chage -W
      loop: "{{ existing_users }}"

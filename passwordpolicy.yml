---
- name: Enforce password policy on Ubuntu
  hosts: all
  become: true
  gather_facts: true

  vars:
    # ←← 這裡可依稽核需求調整
    policy:
      pwquality:
        minlen: 12
        minclass: 3
        maxrepeat: 3
        usercheck: 1
        retry: 3            # 輸入新密碼失敗可重試次數（PAM）
      pass_max_days: 90     # 密碼到期（天）
      pass_min_days: 1      # 兩次變更最小間隔（天）
      pass_warn_age: 7      # 到期前警告（天）
      remember: 5           # 記住最近 N 組舊密碼
      faillock:
        deny: 5
        unlock_time: 600
        fail_interval: 900

    # 需要套用密碼期限的既有帳號（可改成你的清單）
    users_to_update:
      - dgcadmin

  pre_tasks:
    - name: Check OS family is Debian/Ubuntu
      ansible.builtin.assert:
        that:
          - ansible_facts['os_family'] == "Debian"
        fail_msg: "This playbook is intended for Ubuntu/Debian only."

  tasks:
    - name: Ensure required packages are installed
      ansible.builtin.apt:
        name:
          - libpam-pwquality
          - libpam-modules
        state: present
        update_cache: false

    # ---- 密碼複雜度 pwquality.conf ----
    - name: Configure /etc/security/pwquality.conf
      ansible.builtin.blockinfile:
        path: /etc/security/pwquality.conf
        marker: "# {mark} ANSIBLE managed pwquality"
        create: true
        block: |
          minlen = {{ policy.pwquality.minlen }}
          minclass = {{ policy.pwquality.minclass }}
          maxrepeat = {{ policy.pwquality.maxrepeat }}
          usercheck = {{ policy.pwquality.usercheck }}

    - name: Ensure pam_pwquality is referenced in /etc/pam.d/common-password
      ansible.builtin.lineinfile:
        path: /etc/pam.d/common-password
        create: false
        regexp: '^password\s+requisite\s+pam_pwquality\.so'
        line: "password requisite pam_pwquality.so retry={{ policy.pwquality.retry }}"
        insertbefore: '^password\s+\[success=1 default=ignore\]\s+pam_unix\.so'
        backup: true

    # ---- 禁用重複舊密碼 remember ----
    - name: Ensure pam_unix has remember option (append or set)
      ansible.builtin.replace:
        path: /etc/pam.d/common-password
        regexp: '^(password\s+\[.*\]\s+pam_unix\.so.*?)(\s+remember=\d+)?\s*$'
        replace: '\1 remember={{ policy.remember }}'
        backup: true

    # ---- 密碼期限 login.defs（預設值）----
    - name: Set PASS_MAX_DAYS
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        regexp: '^\s*PASS_MAX_DAYS'
        line: "PASS_MAX_DAYS   {{ policy.pass_max_days }}"
        backup: true

    - name: Set PASS_MIN_DAYS
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        regexp: '^\s*PASS_MIN_DAYS'
        line: "PASS_MIN_DAYS   {{ policy.pass_min_days }}"
        backup: true

    - name: Set PASS_WARN_AGE
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        regexp: '^\s*PASS_WARN_AGE'
        line: "PASS_WARN_AGE   {{ policy.pass_warn_age }}"
        backup: true

    # ---- 登入失敗鎖定 pam_faillock ----
    - name: Ensure faillock.conf parameters
      ansible.builtin.blockinfile:
        path: /etc/security/faillock.conf
        marker: "# {mark} ANSIBLE managed faillock"
        create: true
        block: |
          deny = {{ policy.faillock.deny }}
          unlock_time = {{ policy.faillock.unlock_time }}
          fail_interval = {{ policy.faillock.fail_interval }}

    - name: Ensure pam_faillock lines in /etc/pam.d/common-auth (preauth)
      ansible.builtin.blockinfile:
        path: /etc/pam.d/common-auth
        marker: "# {mark} ANSIBLE pam_faillock (preauth/authfail)"
        insertafter: BOF
        block: |
          auth required pam_faillock.so preauth
          auth required pam_faillock.so authfail

    - name: Ensure pam_faillock line in /etc/pam.d/common-account
      ansible.builtin.blockinfile:
        path: /etc/pam.d/common-account
        marker: "# {mark} ANSIBLE pam_faillock (account)"
        insertafter: BOF
        block: |
          account required pam_faillock.so

    # ---- 對既有帳號套用密碼期限（比 chage 更 idempotent）----
    - name: Enforce password aging on existing users (via chage)
      ansible.builtin.command: >
        chage
        -M {{ policy.pass_max_days }}
        -m {{ policy.pass_min_days }}
        -W {{ policy.pass_warn_age }}
        {{ item }}
      loop: "{{ users_to_update }}"
      become: true
      become_method: sudo

  handlers: []

---
- name: Enforce password policy on Ubuntu/Debian  # Playbook 名稱：在 Ubuntu/Debian 系統上強制執行密碼政策
  hosts: all  # 目標主機群組，這裡是所有主機
  become: true  # 以 root 權限執行
  gather_facts: true  # 收集系統資訊

  vars:
    # 可依稽核需求調整
    policy:  # 密碼政策設定
      pwquality:  # 密碼複雜度設定
        minlen: 12  # 最小長度 12
        minclass: 3  # 至少包含 3 種不同類型字符（如大寫、小寫、數字、特殊字元）
        maxrepeat: 3  # 同一字符連續出現上限
        usercheck: 1  # 禁止使用與帳號相似的密碼
        retry: 3  # 輸入錯誤後的重試次數
      pass_max_days: 90  # 密碼最長使用天數
      pass_min_days: 1  # 兩次修改間隔最少天數
      pass_warn_age: 7  # 密碼到期前警告天數
      remember: 5  # 記住最近 5 次使用過的密碼，防止重複
      faillock:  # 登入失敗鎖定設定
        deny: 5  # 連續 5 次失敗後鎖定帳號
        unlock_time: 600  # 鎖定 600 秒（10 分鐘）後解鎖
        fail_interval: 900  # 計算失敗次數的時間範圍（900 秒＝15 分鐘）

    # 要套用密碼期限的既有帳號（自行調整）
    users_to_update:
      - dgcadmin  # 要更新密碼期限的帳號

  pre_tasks:
    - name: Ensure OS is Debian/Ubuntu  # 確認作業系統為 Debian/Ubuntu 系列
      ansible.builtin.assert:
        that: ansible_facts['os_family'] == "Debian"  # 驗證 OS 家族名稱
        fail_msg: "This playbook 僅適用於 Ubuntu/Debian 系列。"  # 驗證失敗時提示

  tasks:
    - name: Install required packages  # 安裝必要套件
      ansible.builtin.apt:
        name:
          - libpam-pwquality  # 提供密碼品質檢查的 PAM 模組
          - libpam-modules    # PAM 核心模組
        state: present  # 確保已安裝
        update_cache: false  # 不更新套件快取

    # ---- 密碼複雜度 pwquality.conf ----
    - name: Configure /etc/security/pwquality.conf  # 設定密碼品質檔案
      ansible.builtin.blockinfile:
        path: /etc/security/pwquality.conf  # 配置檔路徑
        marker: "# {mark} ANSIBLE managed pwquality"  # Ansible 標記
        create: true  # 若檔案不存在則建立
        block: |  # 寫入密碼複雜度設定
          minlen = {{ policy.pwquality.minlen }}
          minclass = {{ policy.pwquality.minclass }}
          maxrepeat = {{ policy.pwquality.maxrepeat }}
          usercheck = {{ policy.pwquality.usercheck }}

    - name: Ensure pam_pwquality is referenced in /etc/pam.d/common-password  # 確保 pam_pwquality.so 已啟用
      ansible.builtin.lineinfile:
        path: /etc/pam.d/common-password  # PAM 密碼設定檔
        regexp: '^password\s+requisite\s+pam_pwquality\.so'  # 搜尋 pam_pwquality.so
        line: "password requisite pam_pwquality.so retry={{ policy.pwquality.retry }}"  # 若不存在則插入
        insertbefore: '^password\s+\[success=1 default=ignore\]\s+pam_unix\.so'  # 插入位置
        backup: true  # 變更前備份

    # ---- 禁止重複使用舊密碼 remember ----
    - name: Ensure pam_unix has remember option  # 確保 pam_unix.so 啟用記住舊密碼
      ansible.builtin.replace:
        path: /etc/pam.d/common-password
        regexp: '^(password\s+\[.*\]\s+pam_unix\.so.*?)(\s+remember=\d+)?\s*$'  # 找出 pam_unix.so 設定
        replace: '\1 remember={{ policy.remember }}'  # 加上 remember 參數
        backup: true

    # ---- 密碼期限 login.defs（預設值）----
    - name: Set PASS_MAX_DAYS  # 設定密碼最長使用天數
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        regexp: '^\s*PASS_MAX_DAYS'  # 找出 PASS_MAX_DAYS
        line: "PASS_MAX_DAYS   {{ policy.pass_max_days }}"  # 設定值
        backup: true

    - name: Set PASS_MIN_DAYS  # 設定兩次密碼修改間隔天數
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        regexp: '^\s*PASS_MIN_DAYS'
        line: "PASS_MIN_DAYS   {{ policy.pass_min_days }}"
        backup: true

    - name: Set PASS_WARN_AGE  # 設定到期前警告天數
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        regexp: '^\s*PASS_WARN_AGE'
        line: "PASS_WARN_AGE   {{ policy.pass_warn_age }}"
        backup: true

    # ---- 登入失敗鎖定 pam_faillock ----
    - name: Configure /etc/security/faillock.conf  # 設定登入失敗鎖定
      ansible.builtin.blockinfile:
        path: /etc/security/faillock.conf
        marker: "# {mark} ANSIBLE managed faillock"
        create: true
        block: |
          deny = {{ policy.faillock.deny }}
          unlock_time = {{ policy.faillock.unlock_time }}
          fail_interval = {{ policy.faillock.fail_interval }}

    - name: Ensure pam_faillock in /etc/pam.d/common-auth  # 確保 pam_faillock 已在認證檔案中啟用
      ansible.builtin.blockinfile:
        path: /etc/pam.d/common-auth
        marker: "# {mark} ANSIBLE pam_faillock (preauth/authfail)"
        insertafter: BOF  # 插入到檔案最上方
        block: |
          auth required pam_faillock.so preauth
          auth required pam_faillock.so authfail

    - name: Ensure pam_faillock in /etc/pam.d/common-account  # 確保帳號管理檔案啟用 pam_faillock
      ansible.builtin.blockinfile:
        path: /etc/pam.d/common-account
        marker: "# {mark} ANSIBLE pam_faillock (account)"
        insertafter: BOF
        block: |
          account required pam_faillock.so

    - name: Read current password aging for dgcadmin  # 讀取指定帳號目前的密碼期限
      command: chage -l dgcadmin
      register: chage_info  # 儲存結果到 chage_info 變數
      changed_when: false  # 只讀取不算變更
      become: yes

    - name: Enforce password aging for dgcadmin  # 強制設定密碼期限
      command: >
        chage -M {{ policy.pass_max_days }}
              -m {{ policy.pass_min_days }}
              -W {{ policy.pass_warn_age }}
              dgcadmin
      when: >  # 只有當現有設定不符合政策時才執行
        ('Maximum number of days between password change: ' ~ policy.pass_max_days|string) not in chage_info.stdout
        or ('Minimum number of days between password change: ' ~ policy.pass_min_days|string) not in chage_info.stdout
        or ('Number of days of warning before password expires: ' ~ policy.pass_warn_age|string) not in chage_info.stdout
      become: yes
      become_user: root
      become_method: sudo
